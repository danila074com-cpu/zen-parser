// server.js
const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');

const app = express();
const port = process.env.PORT || 3000;

// –í–∫–ª—é—á–∞–µ–º Stealth —Ä–µ–∂–∏–º
puppeteer.use(StealthPlugin());

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API
async function realParseWithAPI() {
  console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API...');
  
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –î–∑–µ–Ω
    const apiUrls = [
      'https://dzen.ru/api/v3/launcher/export?clid=300',
      'https://dzen.ru/news/rubric/popular?issue_tld=ru',
      'https://dzen.ru/api/v2/launcher/context'
    ];
    
    for (const apiUrl of apiUrls) {
      try {
        const response = await axios.get(apiUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json',
            'Referer': 'https://dzen.ru/'
          },
          timeout: 10000
        });
        
        console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', apiUrl);
        return parseAPIResponse(response.data);
      } catch (apiError) {
        console.log('‚ùå API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', apiUrl, apiError.message);
      }
    }
    
    throw new Error('–í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    return await realParseWithPuppeteer(); // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Puppeteer
async function realParseWithPuppeteer() {
  console.log('üîç –ó–∞–ø—É—Å–∫ Puppeteer –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...');
  let browser;
  
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--single-process',
        '--disable-gpu'
      ]
    });
    
    const page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π User-Agent
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    await page.setViewport({ width: 1280, height: 720 });
    
    console.log('üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –î–∑–µ–Ω...');
    await page.goto('https://dzen.ru/id/5ae586563dceb76be76eca19', { 
      waitUntil: 'networkidle2', 
      timeout: 30000 
    });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.waitForTimeout(5000);
    
    // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å–∏
    const articles = await page.evaluate(() => {
      const results = [];
      
      // –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–µ–π
      const articleElements = document.querySelectorAll('[data-testid*="card"], article, .card, .feed__item');
      
      articleElements.forEach((element, index) => {
        if (index >= 5) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Å—Ç–∞—Ç—å—è–º–∏
        
        try {
          const titleEl = element.querySelector('h2, h3, [class*="title"], [class*="header"]');
          const textEl = element.querySelector('p, [class*="text"], [class*="content"]');
          const linkEl = element.querySelector('a');
          
          const title = titleEl ? titleEl.innerText.trim() : null;
          const text = textEl ? textEl.innerText.trim() : null;
          const url = linkEl ? linkEl.href : null;
          
          if (title && text && title.length > 10) {
            results.push({
              title: title.substring(0, 150),
              text: text.substring(0, 500),
              url: url || '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
              source: 'Puppeteer'
            });
          }
        } catch (e) {
          console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:', e);
        }
      });
      
      return results;
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Puppeteer: ${articles.length}`);
    return articles;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Puppeteer:', error.message);
    return null;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ API –æ—Ç–≤–µ—Ç–∞
function parseAPIResponse(data) {
  const results = [];
  
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –î–∑–µ–Ω
    if (data.items && Array.isArray(data.items)) {
      data.items.forEach((item, index) => {
        if (index < 5 && item.title) {
          results.push({
            title: item.title,
            text: item.description || item.text || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
            url: item.url || item.link || '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            source: 'API'
          });
        }
      });
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    if (results.length === 0 && data.news) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ API –æ—Ç–≤–µ—Ç–∞:', error.message);
  }
  
  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parseArticles() {
  console.log('üîç –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û –ø–∞—Ä—Å–∏–Ω–≥–∞...');
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  let results = await realParseWithAPI();
  
  // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º Puppeteer
  if (!results || results.length === 0) {
    results = await realParseWithPuppeteer();
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!results || results.length === 0) {
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    results = [
      {
        title: '–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å - –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        text: '–ú—ã –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –î–∑–µ–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫.',
        url: 'https://dzen.ru/id/5ae586563dceb76be76eca19',
        source: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
      }
    ];
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
  const wb = new ExcelJS.Workbook();
  const sheet = wb.addWorksheet('–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω');
  sheet.columns = [
    { header: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', key: 'title', width: 40 },
    { header: '–¢–µ–∫—Å—Ç', key: 'text', width: 60 },
    { header: '–°—Å—ã–ª–∫–∞', key: 'url', width: 30 },
    { header: '–ò—Å—Ç–æ—á–Ω–∏–∫', key: 'source', width: 15 }
  ];
  
  results.forEach(row => sheet.addRow(row));
  
  const outputDir = path.join('/tmp', 'zen_articles');
  fs.mkdirSync(outputDir, { recursive: true });
  const excelPath = path.join(outputDir, 'articles.xlsx');
  
  await wb.xlsx.writeFile(excelPath);
  
  console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${results.length} —Å—Ç–∞—Ç–µ–π`);
  return { 
    success: true, 
    count: results.length, 
    filePath: excelPath,
    source: results[0]?.source || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    message: `–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑: ${results[0]?.source || '—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'}`
  };
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', async (req, res) => {
  const parseResult = await parseArticles();
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–†–ï–ê–õ–¨–ù–´–ô –ü–∞—Ä—Å–µ—Ä –î–∑–µ–Ω</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; }
        .success { color: #28a745; background: #f8fff9; padding: 15px; border-radius: 5px; }
        .warning { color: #ffc107; background: #fffef0; padding: 15px; border-radius: 5px; }
        .info { background: #f0f8ff; padding: 15px; border-radius: 5px; margin: 20px 0; }
      </style>
    </head>
    <body>
      <h1>üöÄ –†–ï–ê–õ–¨–ù–´–ô –ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π –î–∑–µ–Ω</h1>
      
      <div class="${parseResult.source === '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' ? 'warning' : 'success'}">
        <h3>${parseResult.source === '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' ? '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º' : '‚úÖ –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥'}</h3>
        <p>–°—Ç–∞—Ç–µ–π —Å–æ–±—Ä–∞–Ω–æ: <strong>${parseResult.count}</strong></p>
        <p>–ú–µ—Ç–æ–¥: <strong>${parseResult.source}</strong></p>
        <p>${parseResult.message}</p>
      </div>
      
      <div class="info">
        <h3>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
        <p>–ú—ã –ø—Ä–æ–±—É–µ–º 3 –º–µ—Ç–æ–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:</p>
        <ol>
          <li>–ü—Ä—è–º—ã–µ API –∑–∞–ø—Ä–æ—Å—ã</li>
          <li>Puppeteer —Å Stealth –ø–ª–∞–≥–∏–Ω–æ–º</li>
          <li>–ú–æ–±–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã</li>
        </ol>
        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
      </div>
      
      <hr>
      <p><a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª</a> | <a href="/">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</a></p>
    </body>
    </html>
  `);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
app.get('/download', (req, res) => {
  const filePath = path.join('/tmp', 'zen_articles', 'articles.xlsx');
  
  if (fs.existsSync(filePath)) {
    res.download(filePath, '—Å—Ç–∞—Ç—å–∏_–¥–∑–µ–Ω.xlsx', (err) => {
      if (err) {
        console.log('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', err);
        res.send('–§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    });
  } else {
    res.send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
  }
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'Real Zen Parser',
    timestamp: new Date().toISOString(),
    version: '2.0'
  });
});

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log('üéØ –†–ï–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä –î–∑–µ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});