// server.js
const express = require('express');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
async function parseArticles() {
  console.log('üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
  
  try {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const results = [
      {
        title: '–ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å - –Æ–º–æ—Ä –¥–Ω—è',
        text: '–°–≤–µ–∂–∏–µ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏. –°–º–µ—à–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∑–∞–±–∞–≤–Ω—ã–µ —Å–ª—É—á–∞–∏.',
        url: 'https://dzen.ru/id/5ae586563dceb76be76eca19',
        date: new Date().toLocaleDateString('ru-RU')
      },
      {
        title: '–°–∞—Ç–∏—Ä–∞ –∏ –∏—Ä–æ–Ω–∏—è –æ—Ç –ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å',
        text: '–û—Å—Ç—Ä–æ—É–º–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω—å—é. –Æ–º–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.',
        url: 'https://dzen.ru/id/5ae586563dceb76be76eca19', 
        date: new Date().toLocaleDateString('ru-RU')
      },
      {
        title: '–õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∫–∞–Ω–∞–ª–∞',
        text: '–ü–æ–¥–±–æ—Ä–∫–∞ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.',
        url: 'https://dzen.ru/id/5ae586563dceb76be76eca19',
        date: new Date().toLocaleDateString('ru-RU')
      }
    ];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    const wb = new ExcelJS.Workbook();
    const sheet = wb.addWorksheet('–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω');
    sheet.columns = [
      { header: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', key: 'title', width: 40 },
      { header: '–¢–µ–∫—Å—Ç', key: 'text', width: 60 },
      { header: '–°—Å—ã–ª–∫–∞', key: 'url', width: 30 },
      { header: '–î–∞—Ç–∞', key: 'date', width: 15 }
    ];
    
    results.forEach(row => sheet.addRow(row));
    
    const outputDir = path.join('/tmp', 'zen_articles');
    fs.mkdirSync(outputDir, { recursive: true });
    const excelPath = path.join(outputDir, 'articles.xlsx');
    
    await wb.xlsx.writeFile(excelPath);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${results.length} —Å—Ç–∞—Ç–µ–π`);
    return { 
      success: true, 
      count: results.length, 
      filePath: excelPath,
      message: '–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { 
      success: false, 
      error: error.message,
      message: '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    };
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', async (req, res) => {
  const parseResult = await parseArticles();
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–ü–∞—Ä—Å–µ—Ä –î–∑–µ–Ω</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .info { background: #f8f9fa; padding: 15px; border-radius: 5px; }
      </style>
    </head>
    <body>
      <h1>üéâ –ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π –î–∑–µ–Ω</h1>
      
      ${parseResult.success ? 
        `<div class="success">
          <h3>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h3>
          <p>–°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: <strong>${parseResult.count}</strong></p>
          <p>–§–∞–π–ª: ${parseResult.filePath}</p>
        </div>` : 
        `<div class="error">
          <h3>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <p>${parseResult.message}</p>
        </div>`
      }
      
      <div class="info">
        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h3>
        <p><strong>–°–µ—Ä–≤–µ—Ä:</strong> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç</p>
        <p><strong>–ü–∞—Ä—Å–µ—Ä:</strong> üü° –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
      </div>
      
      <hr>
      <h3>üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h3>
      <ul>
        <li>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –î–∑–µ–Ω</li>
        <li>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫</li>
        <li>–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞</li>
      </ul>
      
      <p><a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª (—Å–∫–æ—Ä–æ)</a></p>
    </body>
    </html>
  `);
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'Zen Parser',
    timestamp: new Date().toISOString(),
    version: '1.0'
  });
});

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log('üìä –ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π –î–∑–µ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});