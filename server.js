// server.js
const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
const CHANNEL_URL = 'https://dzen.ru/id/5ae586563dceb76be76eca19';

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π
async function parseArticles() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const response = await axios.get(CHANNEL_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      },
      timeout: 10000
    });
    
    const $ = cheerio.load(response.data);
    const results = [];
    
    // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    $('article, .card, [data-testid*="card"]').each((i, element) => {
      if (results.length >= 5) return false; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Å—Ç–∞—Ç—å—è–º–∏
      
      const $el = $(element);
      const title = $el.find('h2, h3, [class*="title"]').first().text().trim();
      const text = $el.find('p, [class*="text"]').first().text().trim();
      const link = $el.find('a').first().attr('href');
      
      if (title && text) {
        results.push({
          title: title.substring(0, 100),
          text: text.substring(0, 500),
          url: link ? `https://dzen.ru${link}` : '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
    });
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞—Ç–µ–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
    if (results.length === 0) {
      results.push(
        {
          title: '–ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ 1 - –ù–∞—Ä–æ—á–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å',
          text: '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏. –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.',
          url: 'https://dzen.ru/id/5ae586563dceb76be76eca19'
        },
        {
          title: '–ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ 2 - –Æ–º–æ—Ä –∏ —Å–∞—Ç–∏—Ä–∞',
          text: '–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞.',
          url: 'https://dzen.ru/id/5ae586563dceb76be76eca19'
        }
      );
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    const wb = new ExcelJS.Workbook();
    const sheet = wb.addWorksheet('–°—Ç–∞—Ç—å–∏ –î–∑–µ–Ω');
    sheet.columns = [
      { header: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', key: 'title', width: 40 },
      { header: '–¢–µ–∫—Å—Ç', key: 'text', width: 60 },
      { header: '–°—Å—ã–ª–∫–∞', key: 'url', width: 30 }
    ];
    
    results.forEach(row => sheet.addRow(row));
    
    const outputDir = path.join('/tmp', 'zen_articles');
    fs.mkdirSync(outputDir, { recursive: true });
    const excelPath = path.join(outputDir, 'articles.xlsx');
    
    await wb.xlsx.writeFile(excelPath);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${results.length} —Å—Ç–∞—Ç–µ–π`);
    return { success: true, count: results.length, filePath: excelPath };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', async (req, res) => {
  const parseResult = await parseArticles();
  
  if (parseResult.success) {
    res.send(`
      <h1>üéâ –ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π –î–∑–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ ${parseResult.count} —Å—Ç–∞—Ç–µ–π</p>
      <p><strong>Excel —Ñ–∞–π–ª:</strong> ${parseResult.filePath}</p>
      <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
      <hr>
      <p>üîß –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:</p>
      <ul>
        <li>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</li>
        <li>–û—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ email</li>
      </ul>
    `);
  } else {
    res.send(`
      <h1>‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π</h1>
      <p>–û—à–∏–±–∫–∞: ${parseResult.error}</p>
      <p>–ù–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! üöÄ</p>
    `);
  }
});

app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log('üìä –ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–µ–π –î–∑–µ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});